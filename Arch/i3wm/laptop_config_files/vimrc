
set nobackup
set nowritebackup

set encoding=utf-8

"enable mouse
set mouse=a

"Vundle
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/plugins/Vundle.vim
call vundle#begin('~/.vim/plugins/')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" added nerdtree
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'

" syntax checking hacks for vim
"Plugin 'scrooloose/syntastic'

" vim-misc is a dependency of vim-easytags
Plugin 'xolox/vim-misc'
" vim-easytags is a plugin that generates tags files, which is a 
" compiled index of all the functions, variables, and identifies
Plugin 'xolox/vim-easytags'
"tagbar is a plugin that reads your tags files and displays the 
"information in an accessible way inside Vim.
Plugin 'majutsushi/tagbar'

"Full path fuzzy file, buffer, mru, tag, ... finder for Vim
Plugin 'ctrlpvim/ctrlp.vim'

"Alternate Files quickly (.c --> .h etc)
"Plugin 'vim-scripts/a.vim'

"Vim plugin that use clang for completing C/C++ code.
Plugin 'Rip-Rip/clang_complete'

"Python autocompletion with VIM
Plugin 'davidhalter/jedi-vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

nmap <silent> NT :NERDTreeToggle<CR>
autocmd FileType nerdtree nmap <buffer> P u

nnoremap <silent> <C-H> :wincmd h<CR>
nnoremap <silent> <C-L> :wincmd l<CR> 


" ----- xolox/vim-easytags settings -----
" Where to look for tags files
set tags=~/.vimtags
" Sensible defaults
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" ----- xolox/vim-easytags settings end -----

" ----- majutsushi/tagbar settings -----
" Open/close tagbar
nmap <silent> <C-\> :TagbarToggle<CR>

let g:tagbar_autofocus = 1
" ----- majutsushi/tagbar settings end -----


" ----- ctrlpvim/ctrlp.vim settings -----

let g:ctrlp_working_path_mode = 'rw'
"
" ----- ctrlpvim/ctrlp.vim settings end -----

" ----- clang_complete settings -----
let g:clang_use_library = 1

"disable clang_completion on . and ->
let g:clang_complete_auto=0

" change mapping so that control space does user supplied completion
inoremap <expr> <C-v> "\<C-x>\<C-u>"

" Complete options (disable preview scratch window, longest removed to aways show menu)
set completeopt=menu,menuone

" Limit popup menu height
set pumheight=20

" ----- clang_complete settings end -----

syntax on
colorscheme vendetta

set number
set numberwidth=3

" the width of a TAB is set to 4.
" Still it is a \t. It is just that
" Vim will interpret it to be having
" a width of 4
set tabstop=4
set noexpandtab

"Indents will have a width of 4
set shiftwidth=4

"Expand TABs to spaces
"set expandtab


"curle brace autocompletion
autocmd FileType c,cpp,java,sh inoremap {<CR>  {<CR><CR>}<up>
autocmd FileType c,cpp,java,sh inoremap () ()
autocmd FileType c,cpp,java,sh inoremap ( ()<left>
autocmd FileType c,cpp,java,sh set autoindent


nmap # <Home>

vmap v <Esc>

nmap J :tabn<CR> 
nmap K :tabp<CR>
nmap <C-t> :tabnew<CR>
nmap <tab> :bnext<CR>
nmap <S-tab> :bprev<CR>
nnoremap <C-w> :tabclose<CR>
nnoremap <C-d> :bd<CR>

nmap O O<Esc>

map B w

imap jk <Esc><right>
imap kj <Esc><right>

autocmd InsertEnter * set timeoutlen=700
autocmd InsertLeave * set timeoutlen=1000

" Ignore case when searching.
set ignorecase

inoremap <C-k> <C-P>
inoremap <C-j> <C-N>

nmap <up> 18k
nmap <down> 18j

function! NumberToggle()
  if(&relativenumber == 1)
      set norelativenumber
  else
	  set relativenumber
  endif
endfunc

nnoremap nt :call NumberToggle()<cr>

let mapleader = "\<Space>"
nnoremap <Leader>w :w<CR>

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p

nnoremap <CR> G
nnoremap <BS> gg

nnoremap nl i<CR><Esc>
nnoremap E ea
