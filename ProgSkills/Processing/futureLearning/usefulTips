Another useful function is sin() which takes one argument (in radians) and returns the sine of that angle.

You can also define your own functions:

float calculateArea(float radius) {
    return PI * radius * radius;
}

Here are the basic types in Processing:

Type		Explanation	Example
---------------------------------------
boolean		boolean - has	boolean isOpen = true; 
		only two values: 
		true or false

int		integer (whole	int lucky = 7; 
		number, positive 
		or negative, 
		including 0)


float		floating-point 	float balance = -232.5149;
		number (32 bit)

char		single		char middleInitial='p'; 
		character

String		string of	String yourName = "Roman";
		characters
		(text)

2D Drawing:
-----------

 Processing uses a two-dimensional (2D) coordinate system for graphics that begins at the top left of the display window. 
The x coordinates run along the horizontal, from left to right, and 
the y coordinates run along the vertical, from top to bottom.

So if you set a display window using size(500,400) the point in the middle of 
the screen will be at (250,200).

To draw an ‘X’ shape with the endpoints at each corner of the window requires 
two diagonal lines:

line(0, 0, width, height);
line(width, 0, 0, height);

Remember that width and height are defined by Processing based on the size you 
make the display window using the size() function.

Some drawing shapes, such as rect have both a border and an interior fill. 
You can turn off the drawing of borders (using noStroke()) and fill (using 
noFill()), and set the colour independently for each (using stroke() and fill()).


The order of execution of the code draws each new shape on top of what was 
previously drawn on the screen. When drawing with alpha values, the shapes are 
transparent, so you can see what was drawn underneath.

match() is a built-in Processing function that tests for a matching string from 
a list.

match() returns a list of matched strings, but if none match it returns a special
 value, null.

Processing’s built-in key variable -- contains the value of the last keyboard 
key that was pressed

Processing allows you to create polygons with any number of sides using a series 
of function calls:

beginShape();
  vertex(30, 20);
  vertex(85, 20);
  vertex(85, 75);
  vertex(30, 75);
endShape(CLOSE);

This code draws a square, composed of 4 vertices. The CLOSE argument to endShape 
says to join the first and last vertex.

Rather than calculating vertices by hand, normally you’d put a for loop inside 
the beginShape() and endShape() functions to generate shapes programatically.

Getting the display window to fill the screen is achieved with this code:

// make the display window the full size of the screen
size(displayWidth, displayHeight);






